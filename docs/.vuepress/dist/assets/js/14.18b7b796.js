(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{388:function(e,t,a){"use strict";a.r(t);var i=a(7),n=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[e._v("#")]),e._v(" Properties")]),e._v(" "),a("h2",{attrs:{id:"absolute-relative-layout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#absolute-relative-layout"}},[e._v("#")]),e._v(" Absolute/Relative Layout")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("position type")]),e._v(" of an element defines how it is positioned within its parent.\nThe position values top, right, bottom, and left behave differently depending on the position type of the element. For a relative element they offset the position of the element in the direction specified. For absolute element though these properties specify the offset of the element's side from the same side on the parent.")]),e._v(" "),a("h4",{attrs:{id:"relative-default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#relative-default"}},[e._v("#")]),e._v(" RELATIVE (DEFAULT)")]),e._v(" "),a("p",[e._v("By default an element is positioned relatively. This means an element is positioned according to the normal flow of the layout, and then offset relative to that position based on the values of "),a("code",[e._v("top")]),e._v(", "),a("code",[e._v("right")]),e._v(", "),a("code",[e._v("bottom")]),e._v(", and "),a("code",[e._v("left")]),e._v(". The offset does not affect the position of any sibling or parent elements.")]),e._v(" "),a("h4",{attrs:{id:"absolute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#absolute"}},[e._v("#")]),e._v(" ABSOLUTE")]),e._v(" "),a("p",[e._v("When positioned absolutely an element doesn't take part in the normal layout flow. It is instead laid out independent of its siblings. The position is determined based on the "),a("code",[e._v("top")]),e._v(", "),a("code",[e._v("right")]),e._v(", "),a("code",[e._v("bottom")]),e._v(", and "),a("code",[e._v("left")]),e._v(" values.")]),e._v(" "),a("h2",{attrs:{id:"align-content"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#align-content"}},[e._v("#")]),e._v(" Align Content")]),e._v(" "),a("p",[e._v("Align content defines the distribution of lines along the cross-axis. This only has effect when items are wrapped to multiple lines using "),a("code",[e._v("flex wrap")]),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"flex-start-default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-start-default"}},[e._v("#")]),e._v(" FLEX START (DEFAULT)")]),e._v(" "),a("p",[e._v("Align wrapped lines to the start of the container's cross axis.")]),e._v(" "),a("h4",{attrs:{id:"flex-end"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-end"}},[e._v("#")]),e._v(" FLEX END")]),e._v(" "),a("p",[e._v("Align wrapped lines to the end of the container's cross axis.")]),e._v(" "),a("h4",{attrs:{id:"stretch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stretch"}},[e._v("#")]),e._v(" STRETCH")]),e._v(" "),a("p",[e._v("Stretch wrapped lines to match the height of the container's cross axis.")]),e._v(" "),a("h4",{attrs:{id:"center"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#center"}},[e._v("#")]),e._v(" CENTER")]),e._v(" "),a("p",[e._v("Align wrapped lines in the center of the container's cross axis.")]),e._v(" "),a("h4",{attrs:{id:"space-between"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-between"}},[e._v("#")]),e._v(" SPACE BETWEEN")]),e._v(" "),a("p",[e._v("Evenly space wrapped lines across the container's main axis, distributing remaining space between the lines.")]),e._v(" "),a("h4",{attrs:{id:"space-around"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-around"}},[e._v("#")]),e._v(" SPACE AROUND")]),e._v(" "),a("p",[e._v("Evenly space wrapped lines across the container's main axis, distributing remaining space around the lines. Compared to space between using space around will result in space being distributed to the begining of the first lines and end of the last line.")]),e._v(" "),a("h2",{attrs:{id:"align-items"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#align-items"}},[e._v("#")]),e._v(" Align Items")]),e._v(" "),a("p",[e._v("Align items describes how to align children along the cross axis of their container. Align items is very similar to "),a("code",[e._v("justify content")]),e._v(" but instead of applying to the main axis, "),a("code",[e._v("align items")]),e._v(" applies to the cross axis.")]),e._v(" "),a("h4",{attrs:{id:"stretch-default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stretch-default"}},[e._v("#")]),e._v(" STRETCH (DEFAULT)")]),e._v(" "),a("p",[e._v("Stretch children of a container to match the height of the container's cross axis.")]),e._v(" "),a("h4",{attrs:{id:"flex-start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-start"}},[e._v("#")]),e._v(" FLEX START")]),e._v(" "),a("p",[e._v("Align children of a container to the start of the container's cross axis.")]),e._v(" "),a("h4",{attrs:{id:"flex-end-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-end-2"}},[e._v("#")]),e._v(" FLEX END")]),e._v(" "),a("p",[e._v("Align children of a container to the end of the container's cross axis.")]),e._v(" "),a("h4",{attrs:{id:"center-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#center-2"}},[e._v("#")]),e._v(" CENTER")]),e._v(" "),a("p",[e._v("Align children of a container in the center of the container's cross axis.")]),e._v(" "),a("h4",{attrs:{id:"baseline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#baseline"}},[e._v("#")]),e._v(" BASELINE")]),e._v(" "),a("p",[e._v("Align children of a container along a common baseline. Individual children can be set to be the reference baseline for their parents.")]),e._v(" "),a("h2",{attrs:{id:"align-self"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#align-self"}},[e._v("#")]),e._v(" Align Self")]),e._v(" "),a("p",[e._v("Align self has the same options and effect as "),a("code",[e._v("align items")]),e._v(" but instead of affecting the children within a container, you can apply this property to a single child to change its alignment within its parent. "),a("code",[e._v("align self")]),e._v(" overrides any option set by the parent with "),a("code",[e._v("align items")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"aspect-ratio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aspect-ratio"}},[e._v("#")]),e._v(" Aspect Ratio")]),e._v(" "),a("p",[e._v("AspectRatio is a property introduced by Titank and is not present as a settable property in the css flexbox specification. Flexbox does has the notion of aspect ratio though for things with intrinsic aspect ratio such as images.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("aspect ratio")]),e._v(" property in Titank has the following properties:")]),e._v(" "),a("ul",[a("li",[e._v("Accepts any floating point value > 0, the default is undefined.")]),e._v(" "),a("li",[e._v("Defined as the ratio between the "),a("code",[e._v("width")]),e._v(" and the "),a("code",[e._v("height")]),e._v(" of a node e.g. if a node has an aspect ratio of 2 then its "),a("code",[e._v("width")]),e._v(" is twice the size of its "),a("code",[e._v("height")]),e._v(".")]),e._v(" "),a("li",[e._v("Respects the "),a("code",[e._v("min")]),e._v(" and "),a("code",[e._v("max")]),e._v(" dimensions of an item.")]),e._v(" "),a("li",[e._v("Has higher priority than "),a("code",[e._v("flex grow")]),e._v(".")]),e._v(" "),a("li",[e._v("If "),a("code",[e._v("aspect ratio")]),e._v(", "),a("code",[e._v("width")]),e._v(", and "),a("code",[e._v("height")]),e._v(" are set then the cross axis dimension is overridden.")])]),e._v(" "),a("h2",{attrs:{id:"flex-direction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-direction"}},[e._v("#")]),e._v(" Flex Direction")]),e._v(" "),a("p",[e._v("Flex direction controls the direction in which children of a node are laid out. This is also referred to as the main axis. The main axis is the direction in which children are laid out. The cross axis the the axis perpendicular to the main axis, or the axis which wrapping lines are laid out in.")]),e._v(" "),a("h4",{attrs:{id:"row-default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#row-default"}},[e._v("#")]),e._v(" ROW (DEFAULT)")]),e._v(" "),a("p",[e._v("Align children from left to right. If "),a("code",[e._v("wrapping")]),e._v(" is enabled then the next line will start under the first item on the left of the container.")]),e._v(" "),a("h4",{attrs:{id:"column"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#column"}},[e._v("#")]),e._v(" COLUMN")]),e._v(" "),a("p",[e._v("Align children from top to bottom. If "),a("code",[e._v("wrapping")]),e._v(" is enabled then the next line will start to the left first item on the top of the container.")]),e._v(" "),a("h4",{attrs:{id:"row-reverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#row-reverse"}},[e._v("#")]),e._v(" ROW REVERSE")]),e._v(" "),a("p",[e._v("Align children from right to left. If "),a("code",[e._v("wrapping")]),e._v(" is enabled then the next line will start under the first item on the right of the container.")]),e._v(" "),a("h4",{attrs:{id:"column-reverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#column-reverse"}},[e._v("#")]),e._v(" COLUMN REVERSE")]),e._v(" "),a("p",[e._v("Align children from bottom to top. If "),a("code",[e._v("wrapping")]),e._v(" is enabled then the next line will start to the left first item on the bottom of the container.")]),e._v(" "),a("h2",{attrs:{id:"flex-wrap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-wrap"}},[e._v("#")]),e._v(" Flex Wrap")]),e._v(" "),a("p",[e._v("The flex wrap property is set on containers and controls what happens when children overflow the size of the container along the main axis. By default children are forced into a single line (which can shrink elements).")]),e._v(" "),a("p",[e._v("If wrapping is allowed items are wrapped into multiple lines along the main axis if needed. wrap reverse behaves the same, but the order of the lines is reversed.")]),e._v(" "),a("p",[e._v("When wrapping lines align content can be used to specify how the lines are placed in the container.")]),e._v(" "),a("h2",{attrs:{id:"flex-basis-grow-and-shrink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-basis-grow-and-shrink"}},[e._v("#")]),e._v(" Flex Basis, Grow, and Shrink")]),e._v(" "),a("h4",{attrs:{id:"flex-grow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-grow"}},[e._v("#")]),e._v(" FLEX GROW")]),e._v(" "),a("p",[e._v("It describes how any space within a container should be distributed among its children along the main axis. After laying out its children, a container will distribute any remaining space according to the flex grow values specified by its children.")]),e._v(" "),a("p",[e._v("Flex grow accepts any floating point value >= 0, with 0 being the default value. A container will distribute any remaining space among its children weighted by the child’s flex grow value.")]),e._v(" "),a("h4",{attrs:{id:"flex-shrink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-shrink"}},[e._v("#")]),e._v(" FLEX SHRINK")]),e._v(" "),a("p",[e._v("It describes how to shrink children along the main axis in the case that the total size of the children overflow the size of the container on the main axis. flex shrink is very similar to flex grow and can be thought of in the same way if any overflowing size is considered to be negative remaining space. These two properties also work well together by allowing children to grow and shrink as needed.")]),e._v(" "),a("p",[e._v("Flex shrink accepts any floating point value >= 0, with 1 being the default value. A container will shrink its children weighted by the child’s flex shrink value.")]),e._v(" "),a("h4",{attrs:{id:"flex-basis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-basis"}},[e._v("#")]),e._v(" FLEX BASIS")]),e._v(" "),a("p",[e._v("It is an axis-independent way of providing the default size of an item along the main axis. Setting the flex basis of a child is similar to setting the "),a("code",[e._v("width")]),e._v(" of that child if its parent is a container with "),a("code",[e._v("flex direction: row")]),e._v(" or setting the "),a("code",[e._v("height")]),e._v(" of a child if its parent is a container with "),a("code",[e._v("flex direction: column")]),e._v(". The flex basis of an item is the default size of that item, the size of the item before any flex grow and flex shrink calculations are performed.")]),e._v(" "),a("h2",{attrs:{id:"justify-content"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#justify-content"}},[e._v("#")]),e._v(" Justify Content")]),e._v(" "),a("p",[e._v("Justify content describes how to align children within the main axis of their container. For example, you can use this property to center a child horizontally within a container with "),a("code",[e._v("flex direction")]),e._v(" set to "),a("code",[e._v("row")]),e._v(" or vertically within a container with "),a("code",[e._v("flex direction")]),e._v(" set to "),a("code",[e._v("column")]),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"flex-start-default-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-start-default-2"}},[e._v("#")]),e._v(" FLEX START (DEFAULT)")]),e._v(" "),a("p",[e._v("Align children of a container to the start of the container's main axis.")]),e._v(" "),a("h4",{attrs:{id:"flex-end-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-end-3"}},[e._v("#")]),e._v(" FLEX END")]),e._v(" "),a("p",[e._v("Align children of a container to the end of the container's main axis.")]),e._v(" "),a("h4",{attrs:{id:"center-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#center-3"}},[e._v("#")]),e._v(" CENTER")]),e._v(" "),a("p",[e._v("Align children of a container in the center of the container's main axis.")]),e._v(" "),a("h4",{attrs:{id:"space-between-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-between-2"}},[e._v("#")]),e._v(" SPACE BETWEEN")]),e._v(" "),a("p",[e._v("Evenly space of children across the container's main axis, distributing remaining space between the children.")]),e._v(" "),a("h4",{attrs:{id:"space-around-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-around-2"}},[e._v("#")]),e._v(" SPACE AROUND")]),e._v(" "),a("p",[e._v("Evenly space of children across the container's main axis, distributing remaining space around the children. Compared to space between using space around will result in space being distributed to the beginning of the first child and end of the last child.")]),e._v(" "),a("h4",{attrs:{id:"space-evenly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-evenly"}},[e._v("#")]),e._v(" SPACE EVENLY")]),e._v(" "),a("p",[e._v("Evenly distributed within the alignment container along the main axis. The spacing between each pair of adjacent items, the main-start edge and the first item, and the main-end edge and the last item, are all exactly the same.")]),e._v(" "),a("h2",{attrs:{id:"layout-direction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#layout-direction"}},[e._v("#")]),e._v(" Layout Direction")]),e._v(" "),a("p",[e._v("Layout direction specifies the direction in which children and text in a hierarchy should be laid out. Layout direction also effects what edge "),a("code",[e._v("start")]),e._v(" and end refer to. By default Titank lays out with "),a("code",[e._v("LTR")]),e._v(" layout direction. In this mode "),a("code",[e._v("start")]),e._v(" refers to "),a("code",[e._v("left")]),e._v(" and "),a("code",[e._v("end")]),e._v(" refers to "),a("code",[e._v("right")]),e._v(". When localizing your apps for markets with RTL languages you should customize this by either by passing a direction to the "),a("code",[e._v("CalculateLayout")]),e._v(" call or by setting the direction on the root node.")]),e._v(" "),a("h4",{attrs:{id:"ltr-default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ltr-default"}},[e._v("#")]),e._v(" LTR (DEFAULT)")]),e._v(" "),a("p",[e._v("Text and children and laid out from left to right. Margin and padding applied the start of an element are applied on the left side.")]),e._v(" "),a("h4",{attrs:{id:"rtl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rtl"}},[e._v("#")]),e._v(" RTL")]),e._v(" "),a("p",[e._v("Text and children and laid out from right to left. Margin and padding applied the start of an element are applied on the right side.")]),e._v(" "),a("h2",{attrs:{id:"margins-paddings-and-borders"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#margins-paddings-and-borders"}},[e._v("#")]),e._v(" Margins, Paddings, and Borders")]),e._v(" "),a("h4",{attrs:{id:"margin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#margin"}},[e._v("#")]),e._v(" MARGIN")]),e._v(" "),a("p",[e._v("It effects the spacing around the outside of a node. A node with margin will offset itself from the bounds of its parent but also offset the location of any siblings. The margin of a node contributes to the total size of its parent if the parent is auto sized.")]),e._v(" "),a("h4",{attrs:{id:"padding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#padding"}},[e._v("#")]),e._v(" PADDING")]),e._v(" "),a("p",[e._v("It affects the size of the node it is applied to. Padding in Titank acts as if box-sizing: border-box; was set. That is padding will not add to the total size of an element if it has an explicit size set. For auto sized nodes padding will increase the size of the node as well as offset the location of any children.")]),e._v(" "),a("h4",{attrs:{id:"border"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#border"}},[e._v("#")]),e._v(" BORDER")]),e._v(" "),a("p",[e._v("In Titank it acts exactly like padding and only exists as a seperate property so that higher level frameworks get a hint as to how thick to draw a border. Titank however does not do any drawing so just uses this information during layout where border acts exactly like padding.")]),e._v(" "),a("h2",{attrs:{id:"max-min-width-and-height"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-min-width-and-height"}},[e._v("#")]),e._v(" Max / Min Width and Height")]),e._v(" "),a("p",[e._v("All the following properties set the maximum and minimum size constraints of an element. These properties have higher priority than all other properties and will always be respected. Constraints can be specified as either absolute pixel values or as percentages of their parent's size. By default all these constraints are "),a("code",[e._v("undefined")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"width-and-height"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#width-and-height"}},[e._v("#")]),e._v(" Width and Height")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("width")]),e._v(" property in Titank specifies the width of the element's content area. Similarly "),a("code",[e._v("height")]),e._v(" property specifies the height of the element's content area.")]),e._v(" "),a("p",[e._v("Both "),a("code",[e._v("width")]),e._v(" and "),a("code",[e._v("height")]),e._v(" can take following values:")]),e._v(" "),a("p",[a("strong",[e._v("AUTO")]),e._v(" Is the default Value, Titank calculates the width/height for the element based on its content, whether that is other children, text, or an image.")]),e._v(" "),a("p",[a("strong",[e._v("PIXELS")]),e._v(" Defines the width/height in absolute pixels. Depending on other properties set on the Titank node this may or may not be the final dimension of the node.")]),e._v(" "),a("p",[a("strong",[e._v("PERCENTAGE")]),e._v(" Defines the width or height in percentage of its parent's width or height respectively.")])])}),[],!1,null,null,null);t.default=n.exports}}]);